// Generated by Dagger (https://dagger.dev).
package com.android.data.di;

import com.android.data.source.local.AppDatabase;
import com.android.data.source.remote.RetrofitService;
import com.android.domain.repository.PhotoRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class NetworkModule_ProvidePhotoRepositoryFactory implements Factory<PhotoRepository> {
  private final NetworkModule module;

  private final Provider<AppDatabase> appDatabaseProvider;

  private final Provider<RetrofitService> retrofitServiceProvider;

  public NetworkModule_ProvidePhotoRepositoryFactory(NetworkModule module,
      Provider<AppDatabase> appDatabaseProvider,
      Provider<RetrofitService> retrofitServiceProvider) {
    this.module = module;
    this.appDatabaseProvider = appDatabaseProvider;
    this.retrofitServiceProvider = retrofitServiceProvider;
  }

  @Override
  public PhotoRepository get() {
    return providePhotoRepository(module, appDatabaseProvider.get(), retrofitServiceProvider.get());
  }

  public static NetworkModule_ProvidePhotoRepositoryFactory create(NetworkModule module,
      Provider<AppDatabase> appDatabaseProvider,
      Provider<RetrofitService> retrofitServiceProvider) {
    return new NetworkModule_ProvidePhotoRepositoryFactory(module, appDatabaseProvider, retrofitServiceProvider);
  }

  public static PhotoRepository providePhotoRepository(NetworkModule instance,
      AppDatabase appDatabase, RetrofitService retrofitService) {
    return Preconditions.checkNotNullFromProvides(instance.providePhotoRepository(appDatabase, retrofitService));
  }
}
